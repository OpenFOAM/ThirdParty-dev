NAME
  amk_ccc, amk_fft2, amk_hy, amk_m2, amk_p2 - create target architectures

SYNOPSIS
  amk_ccc [options] dim [tfile]

  amk_fft2 [options] dim [tfile]

  amk_hy [options] dim [tfile]

  amk_m2 [options] dimX [dimY] [tfile]

  amk_p2 [options] [wght0] [wght1] [tfile]

DESCRIPTION
  The amk_* programs create target architecture files for some common,
  regular topologies.

  amk_ccc creates a decomposition-defined cube-connected-cycle
  topology of dimension dim. The decomposition is performed first by
  bisection along the dimensions of the hypercube, then along the
  remaining cycle graphs.

  amk_fft2 creates a decomposition-defined fast-Fourier-transform
  topology of dimension dim. The decomposition is performed by
  recursive bisection of the vertices, by descending dimension
  (that is, bit number in the labeling of the vertices).

  amk_hy creates a decomposition-defined hypercube topology of
  dimension dim. The decomposition is performed by
  recursive bisection of the vertices, by descending dimension
  (that is, bit number in the labeling of the vertices). Save for
  experimentation purposes, this program is deprecated, as the
  algorithmically-defined 'hcub' target architecture is a more
  convenient and efficient way to represent hypercube architectures.

  amk_m2 creates a decomposition-defined 2D regular grid topology of
  dimensions dimX and dimY. The decomposition is performed by
  recursive splitting along the dimensions, either by cutting the
  longest one, or by one-way dissection, depending on the '-m' option
  flag. Save for experimentation purposes, this program is deprecated,
  as the algorithmically-defined 'mesh2D' and 'mesh3D' target
  architectures are a more convenient and efficient way to represent
  2D and 3D grid architectures.

  amk_p2 creates a weighted path graph topology comprising only two
  vertices of weights wght0 and wght1. This is just a helper program,
  which builds a 'wcmplt' algorithmically-defined complete graph with
  two vertices. It may be used to compute weighted bisections of a
  graph.

  When the proper libraries have been included at compile time, the
  amk_* programs can directly handle compressed files, both as input
  and output. A stream is treated as compressed whenever its name is
  postfixed with a compressed file extension, such as
  in 'brol.tgt.bz2' or '-.gz'. The compression formats which can be
  supported are the bzip2 format ('.bz2'), the gzip format ('.gz'),
  and the lzma format ('.lzma').

OPTIONS
  -mmeth    For amk_m2 only. Perform either recursive dissection or
              one-way dissection, according to the given method flag:
              n  perform nested dissection (default).
              o  perform one-way dissection (cut across Y, then X).

  -h          Display some help.

  -V          Display program version and copyright.

EXAMPLE
  Create a cube-connected-cycle target architecture of dimension 4,
  and save it to file 'ccc4.tgt'.

    $ amk_ccc 4 ccc4.tgt

  Run gmap to compute a bisection, into two parts of respective weights
  3 and 5, of graph 'brol.grf' and save the resulting mapping to
  file 'brol.map'. The dash '-' standard file name is used so that the
  target architecture description is read from the standard input,
  through the pipe.

    $ amk_p2 3 5 | gmap brol.grf - brol.map

SEE ALSO
  acpl(1), atst(1), amk_grf(1), dgmap(1), gmap(1).

  Scotch user's manual.

AUTHOR
  Francois Pellegrini <francois.pellegrini@labri.fr>
